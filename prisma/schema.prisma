generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pets      Pet[]
  notes     Note[]
  events    Event[]
}

model Pet {
  id              String          @id @default(uuid())
  name            String
  dob             DateTime
  weight          Float
  type            PetType
  breed           String
  gender          PetGender
  image           String?
  hasPetPlan      Boolean         @default(false)
  petPlanName     String?
  hasFuneraryPlan Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  notes           Note[]
  events          Event[]
  VaccineRecord   VaccineRecord[]
  Exam            Exam[]
  Treatment       Treatment[]
}

enum PetType {
  DOG
  CAT
  OTHER
}

enum PetGender {
  MALE
  FEMALE
}

enum NoteSeverity {
  LOW
  MEDIUM
  HIGH
}

model Note {
  id          String       @id @default(uuid())
  title       String
  description String
  severity    NoteSeverity
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  pet         Pet          @relation(fields: [petId], references: [id])
  petId       String
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
}

model Event {
  id        String   @id @default(uuid())
  title     String
  type      String
  createdAt DateTime @default(now())
  eventDate DateTime
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([petId])
  @@index([userId])
}

model VaccineRecord {
  id                 String      @id @default(uuid())
  pet                Pet         @relation(fields: [petId], references: [id])
  petId              String
  vaccineType        VaccineType @relation(fields: [vaccineTypeId], references: [id])
  vaccineTypeId      String
  administrationDate DateTime
  nextDueDate        DateTime?
  validUntil         DateTime?
  lotNumber          String?
  administeredBy     String? // Vet or clinic name
  notes              String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([petId])
  @@index([vaccineTypeId])
}

model VaccineType {
  id                    String   @id @default(uuid())
  name                  String
  diseaseCovered        String[]
  isCore                Boolean
  boosterRequired       Boolean
  boosterIntervalMonths Int?
  totalRequiredDoses    Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  vaccineRecords VaccineRecord[]
}

model Exam {
  id             String     @id @default(uuid())
  pet            Pet        @relation(fields: [petId], references: [id])
  petId          String
  title          String
  cause          String
  administeredBy String?
  fileUrl        String?
  resultSummary  String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  treatment      Treatment? @relation("TreatmentExams", fields: [treatmentId], references: [id])
  treatmentId    String?

  @@index([petId])
}

model Treatment {
  id          String    @id @default(uuid())
  pet         Pet       @relation(fields: [petId], references: [id])
  petId       String
  cause       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  exams       Exam[]       @relation("TreatmentExams")
  medications Medication[]

  @@index([petId])
}

model Medication {
  id          String    @id @default(uuid())
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId String
  name        String // e.g. "Doxiciclina"
  dosage      String? // e.g. "100mg"
  frequency   String? // e.g. "A cada 12h"
  notes       String? // Instruções extras
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
